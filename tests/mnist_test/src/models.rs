
// This file has been automatically generated by Jinja2 via the
// script /Users/almico/projects/blowtorch/python/blowtorch/generate_models.py.
// Please do not change this file by hand.
use blowtorch::ndarray::*;
use blowtorch::nn::loading::WeightLoader;
use blowtorch::nn::utils::Padding;
use blowtorch::nn::{Layer, FloatLikePrimitive};
use blowtorch::nn::{ConvolutionLayer, TransposedConvolutionLayer, LinearLayer, Flatten};


 
    pub struct MnistClassifier<F: FloatLikePrimitive> {
        
            conv1: ConvolutionLayer<F>,
        
            conv2: ConvolutionLayer<F>,
        
            flatten1: Flatten<F>,
        
            flatten2: Flatten<F>,
        
            fc1: LinearLayer<F>,
        
            fc2: LinearLayer<F>,
        
            fc3: LinearLayer<F>,
        
    }

    impl<F: FloatLikePrimitive> Layer<Array3<F>, Array1<F>> for MnistClassifier<F> {
        
        #[allow(clippy::let_and_return)]
        fn forward_pass(&self, input: &Array3<F>) -> Array1<F> {
            let x = input.clone();
            
            
                let x = self.conv1.forward_pass(&x);
                
            
                let x = self.conv2.forward_pass(&x);
                
            
                let x = self.flatten1.forward_pass(&x);
                
            
                let x = self.flatten2.forward_pass(&x);
                
            
                let x = self.fc1.forward_pass(&x);
                
            
                let x = self.fc2.forward_pass(&x);
                
            
                let x = self.fc3.forward_pass(&x);
                
            
            x
        }
    }

    impl<F: FloatLikePrimitive> MnistClassifier<F> {
        pub fn new(loader: &mut impl WeightLoader) -> Self {
            
                        let conv1_weight = loader.get_weight("layers.conv1.weight.npy",
                            (6, 1, 5, 5)
                        ).unwrap();
                        let conv1 = ConvolutionLayer::new(
                    
                    
                            conv1_weight,
                            
                        
                    
                            None,
                        
                    
                    1,Padding::Same,
                );
            
                        let conv2_weight = loader.get_weight("layers.conv2.weight.npy",
                            (16, 6, 5, 5)
                        ).unwrap();
                        let conv2 = ConvolutionLayer::new(
                    
                    
                            conv2_weight,
                            
                        
                    
                            None,
                        
                    
                    1,Padding::Same,
                );
            let flatten1 = Flatten::new(
                    
                    
                    
                );
            let flatten2 = Flatten::new(
                    
                    
                    
                );
            
                        let fc1_weight = loader.get_weight("layers.fc1.weight.npy",
                            (120, 12544)
                        ).unwrap();
                        let fc1 = LinearLayer::new(
                    
                    
                            fc1_weight,
                            
                        
                    
                            None,
                        
                    
                    
                );
            
                        let fc2_weight = loader.get_weight("layers.fc2.weight.npy",
                            (84, 120)
                        ).unwrap();
                        let fc2 = LinearLayer::new(
                    
                    
                            fc2_weight,
                            
                        
                    
                            None,
                        
                    
                    
                );
            
                        let fc3_weight = loader.get_weight("layers.fc3.weight.npy",
                            (10, 84)
                        ).unwrap();
                        let fc3 = LinearLayer::new(
                    
                    
                            fc3_weight,
                            
                        
                    
                            None,
                        
                    
                    
                );
            
            Self {
                
                    conv1,
                
                    conv2,
                
                    flatten1,
                
                    flatten2,
                
                    fc1,
                
                    fc2,
                
                    fc3,
                
            }
        }
    }
